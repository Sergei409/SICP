#lang racket
;------------------------------ (1.8)
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))
(define (good-enough? guess x)
  (< (abs (- (cube guess) x)) epsilon))
(define (cube x)
  (* x x x))
(define (square x)
  (* x x))
(define epsilon .001)
(define (improve guess x)
  (average guess (/ x (square guess))))
(define (average x y)
  (/ (+ (* 2 x) y) 3.0))
(define (sqrt x)
  (sqrt-iter 1.0 x))
(sqrt 27)